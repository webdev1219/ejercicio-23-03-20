{"version":3,"sources":["components/Spinner/Spinner.js","components/Header/Header.js","components/UserList/UserList.js","helpers/api.js","App.js","registerServiceWorker.js","index.js"],"names":["Spinner","props","className","message","Header","title","UserList","this","users","map","user","key","login","href","html_url","target","Component","instance","axios","create","baseURL","App","handleSearchInput","event","setState","search","value","handleClick","input","isLoading","state","get","then","result","data","items","catch","error","console","log","loading","onChange","type","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sQASeA,G,YANC,SAACC,GACf,OACE,uBAAGC,UAAU,WAAWD,EAAME,WCMnBC,G,MARA,SAACH,GACd,OACE,yBAAKC,UAAU,UACb,4BAAKD,EAAMI,UCJIC,E,uKAEjB,OACE,4BACGC,KAAKN,MAAMO,MAAMC,KAAI,SAACC,GACrB,OACE,wBAAIC,IAAKD,EAAKE,OAAO,uBAAGC,KAAMH,EAAKI,SAAUC,OAAO,UAAUL,EAAKE,gB,GANzCI,a,QCAhCC,E,OAAWC,EAAMC,OAAO,CAC5BC,QAAS,4B,ICgEIC,E,kDA1Db,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAQRqB,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZC,OAAQF,EAAMR,OAAOW,SAXN,EAenBC,YAAc,WDjBT,IAAkBC,ECkBrB,EAAKJ,SAAS,CACZK,WAAW,KDnBQD,ECqBZ,EAAKE,MAAML,ODpBfR,EAASc,IAAT,0BAAgCH,KCqBlCI,MAAK,SAACC,GACL,EAAKT,SAAS,CACZhB,MAAOyB,EAAOC,KAAKC,MACnBN,WAAW,OAGdO,OAAM,SAACC,GACNC,QAAQC,IAAIF,OAzBhB,EAAKP,MAAQ,CACXL,OAAQ,GACRjB,MAAO,GACPqB,WAAW,GALI,E,qDA+BT,IAAD,EACsBtB,KAAKuB,MAA1BD,EADD,EACCA,UAAWrB,EADZ,EACYA,MACbgC,EAAUX,EACd,kBAAC,EAAD,CAAS1B,QAAQ,YAEjB,kBAAC,EAAD,CAAUK,MAAOA,IAGnB,OACE,6BACE,kBAAC,EAAD,CAAQH,MAAM,kBACd,yBAAKH,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,qCACb,2BAAOuC,SAAUlC,KAAKe,kBAAmBoB,KAAK,SAC9C,4BAAQC,QAASpC,KAAKoB,YAAazB,UAAU,iBAA7C,UAGCsC,U,GAlDGxB,aCEZ4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTnB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB3B,QACfsB,UAAUC,cAAcO,WAK1BtB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBH,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MCjEjEwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBZ,UAAW,CAGzE,GADkB,IAAIa,IAAIC,GAAwBpB,OAAOC,UAC3CoB,SAAWrB,OAAOC,SAASoB,OAIvC,OAGFrB,OAAOsB,iBAAiB,QAAQ,WAC9B,IAAMjB,EAAK,UAAMe,GAAN,sBAEPtB,EAwCV,SAAiCO,GAE/BkB,MAAMlB,GACHnB,MAAK,SAAAsC,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQzC,IAAI,gBAAgB0C,QAAQ,cAG7CrB,UAAUC,cAAcqB,MAAM1C,MAAK,SAAAuB,GACjCA,EAAaoB,aAAa3C,MAAK,WAC7Bc,OAAOC,SAAS6B,eAKpB1B,EAAgBC,MAGnBf,OAAM,WACLE,QAAQC,IACN,oEA5DAsC,CAAwB1B,GAGxBD,EAAgBC,OCjCxB2B,K","file":"static/js/main.704e73db.chunk.js","sourcesContent":["import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = (props) => {\n  return (\n    <p className=\"spinner\">{props.message}</p>\n  )\n};\n\nexport default Spinner;\n\n","import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n  return (\n    <div className=\"header\">\n      <h1>{props.title}</h1>\n    </div>\n  );\n}\n\nexport default Header;","import React, { Component } from 'react'\n\nexport default class UserList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.users.map((user) => {\n          return (\n            <li key={user.login}><a href={user.html_url} target=\"_blank\">{user.login}</a></li>\n          );\n        })}\n      </ul>\n    )\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.github.com/\",\n  // timeout: 3000,\n});\n\nexport function getUsers(input) {\n  return instance.get(`/search/users?q=${input}`);\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Spinner from \"./components/Spinner/Spinner\";\nimport Header from \"./components/Header/Header\";\nimport UserList from \"./components/UserList/UserList\";\n\nimport { getUsers } from \"./helpers/api\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: \"\",\n      users: [],\n      isLoading: false,\n    };\n  }\n\n  handleSearchInput = (event) => {\n    this.setState({\n      search: event.target.value,\n    });\n  };\n\n  handleClick = () => {\n    this.setState({\n      isLoading: true,\n    });\n    getUsers(this.state.search)\n      .then((result) => {\n        this.setState({\n          users: result.data.items,\n          isLoading: false,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  render() {\n    const { isLoading, users } = this.state;\n    const loading = isLoading ? (\n      <Spinner message=\"Loading\" />\n    ) : (\n      <UserList users={users} />\n    );\n\n    return (\n      <div>\n        <Header title=\"github search\" />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"column column-50 column-offset-25\">\n              <input onChange={this.handleSearchInput} type=\"text\" />\n              <button onClick={this.handleClick} className=\"search-button\">\n                search\n              </button>\n              {loading}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}